""" Plugins ---------------------------
set NERDTree
set surround
set commentary
set argtextobj
set easymotion
set textobj-entire
set ReplaceWithRegister
set which-key
set exchange
"" Multiple Cursors Plugin
" 1. JetBrains multiple-cursors plugin
" https://github.com/JetBrains/ideavim/wiki/IdeaVim-Plugins
set multiple-cursors
" 2. IdeaVimMulticursor(dankinsoid)
" https://plugins.jetbrains.com/plugin/19162-ideavimmulticursor
" https://github.com/dankinsoid/IdeaVimMulticursor
set multicursor
" IdeaVim-Quickscope
set quickscope
" Other plugins
Plug 'machakann/vim-highlightedyank'

""" Plugin settings -------------------
let g:argtextobj_pairs="[:],(:),<:>"

""" Common settings -------------------
set showmode
set scrolloff=5
set incsearch
set nu rnu
set notimeout
"set timeoutlen=3000
set clipboard+=unnamed

""" Idea specific settings ------------
set ideajoin
set ideastatusicon=gray
set idearefactormode=keep

""" Mappings --------------------------

" Leader mappings
let mapleader = "\\"
vnoremap     <leader>y      "*y
vnoremap     <C-c>          "*y
nnoremap     <leader>p      "*p
vnoremap     <leader>p      "*p

"-- +Code
" leader c
let g:WhichKeyDesc_c =      "<leader>c  Code"
let g:WhichKeyDesc_cf =     "<leader>cf ReformatCode"
let g:WhichKeyDesc_cr =     "<leader>cr RearrangeCode"
noremap      <leader>cf     :action ReformatCode<CR>
noremap      <leader>cr     :action RearrangeCode<CR>

"+Find
" leader f
let g:WhichKeyDesc_f =      "<leader>f  Find"
noremap      <leader>fF     :action FindInPath<CR>
noremap      <leader>ff     :action Find<CR>
noremap      <leader>fr     :action Replace<CR>
noremap      <leader>f/     :action StructuralSearchPlugin.StructuralSearchAction<CR>

"+Git
" leader g
let g:WhichKeyDesc_g =      "<leader>g  Git"
let g:WhichKeyDesc_gc =     "<leader>gc Checkin Project"
let g:WhichKeyDesc_ga =     "<leader>gc Checkin Project with message"
let g:WhichKeyDesc_gp =     "<leader>gp Push"
let g:WhichKeyDesc_gf =     "<leader>gf Update Project"
noremap      <leader>gc     :action CheckinProject<CR>
noremap      <leader>ga     :action CheckinProject<CR>:action TriggerCosyCommitMessageGenerationAction<CR>
noremap      <leader>gp     :action Vcs.Push<CR>
noremap      <leader>gf     :action Vcs.UpdateProject<CR>

""" Which key descriptions ------------
let g:WhichKeyDesc_slash =  "<leader>\  Switcher"
" leader l
let g:WhichKeyDesc_l =      "<leader>l  Toggle line Breakpoint"
noremap      <leader>\      :action Switcher<CR>
nmap         <leader>l      <Action>(ToggleLineBreakpoint)

"+Build
" leader b
let g:WhichKeyDesc_b =      "<leader>b  Build"
let g:WhichKeyDesc_bm =     "<leader>bm Reimport Maven"
let g:WhichKeyDesc_bb =     "<leader>bb Build"
let g:WhichKeyDesc_bB =     "<leader>bB Rebuild"
let g:WhichKeyDesc_bd =     "<leader>bd Debug"
nmap         <leader>bb     <Action>(CompileDirty)
nmap         <leader>bB     <Action>(CompileProject)
nmap         <leader>bd     <Action>(Debug)
noremap      <leader>bm     :action Maven.Reimport<CR>

"+EasyMotion
" leader q
let g:WhichKeyDesc_q =      "<leader>q  EasyMotion"
let g:WhichKeyDesc_qs =     "<leader>qs Search"
let g:WhichKeyDesc_qf =     "<leader>qf Front"
let g:WhichKeyDesc_qF =     "<leader>qF Back"
nmap         <leader>qs   <Plug>(easymotion-s)
nmap         <leader>qf   <Plug>(easymotion-f)
nmap         <leader>qF   <Plug>(easymotion-F)

"+Replacing
" leader d
let g:WhichKeyDesc_d =      "<leader>d  Delete"
let g:WhichKeyDesc_dv =     "<leader>dv Delete validation messages"
let g:WhichKeyDesc_dx =     "<leader>dx Delete empty brackets"
" Quick remove message from validation annotation
nnoremap     <leader>dv     :%s/,\? \?message \?= \?".\+"//g<CR>
nnoremap     <leader>dx     :%s/\(@\w\+\)()/\1/g<CR>

"+Running/Debugging
" leader r
let g:WhichKeyDesc_r =      "<leader>r  +Running/Debugging"
let g:WhichKeyDesc_rr =     "<leader>rr Rerun"
nmap         <leader>rr     <Action>(Rerun)

"+Refactoring
" leader e
let g:WhichKeyDesc_e =      "<leader>e   Refactoring"
let g:WhichKeyDesc_eg =     "<leader>eg  Rearrange Code"
let g:WhichKeyDesc_ee =     "<leader>ee  Rename Element"
let g:WhichKeyDesc_et =     "<leader>et  Surround With"
let g:WhichKeyDesc_er =     "<leader>er  QuickListPopupAction"
let g:WhichKeyDesc_el =     "<leader>el  Lombok Data"
let g:WhichKeyDesc_eR =     "<leader>eR  Menu"
let g:WhichKeyDesc_es =     "<leader>es  String Manipulation"
let g:WhichKeyDesc_ec =     "<leader>ec  Change Signature"
noremap      <leader>eg     :action RearrangeCode<CR>
noremap      <leader>ee     :action RenameElement<CR>
noremap      <leader>et     :action SurroundWith<CR>
noremap      <leader>er     :action Refactorings.QuickListPopupAction<CR>
noremap      <leader>el     :action defaultLombokData<CR>
noremap      <leader>eR     :action RefactoringMenu<CR>
noremap      <leader>es     :action StringManipulation.Group.Main<CR>
noremap      <leader>ec     :action ChangeSignature<CR>

"+Tools
" leader t
let g:WhichKeyDesc_t =      "<leader>t  Tools"
let g:WhichKeyDesc_tt =     "<leader>tt Translate"
let g:WhichKeyDesc_ttr =    "<leader>ttr Translate and replace"
noremap      <leader>ttr    :action Translation.TranslateAndReplaceAction<CR>

noremap      <leader>1      :action GoToTab1<CR>
noremap      <leader>2      :action GoToTab2<CR>
noremap      <leader>3      :action GoToTab3<CR>
noremap      <leader>4      :action GoToTab4<CR>
noremap      <leader>5      :action GoToTab5<CR>
" Different viewer mappings
noremap      <leader><C-d>  :action NextDiff<CR>
noremap      <leader><C-f>  :action PreviousDiff<CR>

" =====================
" Space leader mappings
noremap      <Space>b       :action GotoDeclaration<CR>
noremap      <Space>B       :action GotoImplementation<CR>
noremap      <Space><C-b>   :action GotoSuperMethod<CR>
noremap      <Space>k       :action Back<CR>
noremap      <Space>j       :action Forward<CR>
noremap      <Space>h       :action PreviousTab<CR>
noremap      <Space>l       :action NextTab<CR>
noremap      <Space>e       :action RecentFiles<CR>
noremap      <Space>E       :action $LRU<CR>
noremap      <Space>frs     :%s/
noremap      <Space>v       :action SelectInProjectView<CR>
noremap      <Space>t       :NERDTree<CR>
noremap      <Space>w       :action CloseContent<CR>
noremap      <Space>W       :action CloseProject<CR>
noremap      <Space>N       :action GotoFile<CR>
noremap      <Space>n       :action GotoClass<CR>
noremap      <Space>/       :action FileStructurePopup<CR>
noremap      <Space>q       :action ParameterInfo<CR>
noremap      <Space>a       ggvG$
noremap      <Space>o       :action OverrideMethods<CR>
noremap      <Space>q       :action QuickJavaDoc<CR>
noremap      <Space>So      :action VimActions<CR>
noremap      <Space>Ss      :so ~/.ideavimrc<CR>
noremap      <Space>Sr      :action IdeaVim.ReloadVimRc.reload<CR>



noremap      <Space>p       "0p
noremap      <Space>y       "0y
noremap      <Space>if      :action NewElement<CR>
noremap      <Space>ie      :action Generate<CR>

" Insert mode mappings
inoremap     <C-f>          :action Find<CR>
inoremap     <C-v>          <C-r>+
inoremap     <C-p>          :action ParameterInfo<CR>

""" AceJump Example ------------------
" Press `f` to activate AceJump
"map f <Action>(AceAction)
" Press `F` to activate Target Mode
"map F <Action>(AceTargetAction)
" Press `g` to activate Line Mode
"map g <Action>(AceLineAction)

""" Which key ------------------------
let g:WhichKey_FontFamily = "JetBrains Mono"
let g:WhichKey_ShowVimActions = "true"
let g:WhichKey_ProcessUnknownMappings = "true"
